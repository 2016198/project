#include "_debug/_DebugConOut.h"
#include "_debug/_DebugDispOut.h"
#include "DxLib.h"
#include "Stage.h"

#define MAP_NORMAL_X MAP_X		//ノーマルマップサイズX
#define MAP_NORMAL_Y MAP_Y		//ノーマルマップサイズY

int mapNormal[MAP_NORMAL_Y][MAP_NORMAL_X] = {		//ノーマルマップ
	{11,11,11,11,11, 11,11,11,11,11, 11,11,11,11,11, 11,11,11,11,11, 11,11,11,11},
	{11,00,00,00,00, 00,00,00,00,00, 00,10,00,00,00, 00,10,00,00,00, 00,00,00,11},
	{11,00,00,00,00, 00,00,00,00,00, 00,10,00,00,00, 00,10,00,00,00, 00,00,00,11},
	{11,00,00,00,00, 00,00,00,00,00, 00,10,00,00,00, 00,10,00,00,00, 00,00,00,11},
	{11,00,00,00,00, 00,00,00,00,00, 00,10,00,00,00, 00,10,00,11,00, 00,00,00,11},

	{11,01,01,01,01, 01,01,01,01,01, 01,01,01,01,01, 01,01,11,12,01, 01,01,01,11},
	{11,01,01,01,01, 01,11,11,11,01, 01,01,01,01,01, 01,11,12,12,01, 01,01,01,11},
	{11,03,03,03,03, 03,03,03,03,03, 03,03,03,03,03, 03,03,03,03,03, 03,03,03,11},
	{11,01,01,01,01, 01,01,01,01,01, 01,01,01,01,01, 01,01,01,01,01, 01,01,01,11},
	{11,01,01,04,04, 04,04,04,04,04, 01,11,11,11,11, 01,01,01,01,01, 01,01,01,11},

	{11,01,01,05,05, 05,05,05,05,05, 01,01,02,01,01, 01,01,01,01,01, 01,01,01,11},
	{11,01, 1,01,01, 01,01,01,01,01, 01,01,01,01,01, 01,01,01,01,01, 01,01,01,11},
	{11,01,11,01,01, 01,01,01,01,01, 01,01,02,01,01, 01,01,01,01,01, 01,01,01,11},
	{11,11,11,11,11, 11,11,11,11,11, 11,11,11,11,11, 11,11,11,11,11, 11,11,11,11}
};

#define MAP_FIRE_X MAP_X		//炎マップサイズX
#define MAP_FIRE_Y MAP_Y		//炎マップサイズY

int mapFire[MAP_FIRE_Y][MAP_FIRE_X] = {		//炎マップ
	{00,00,00,00,00, 00,00,00,00,00, 00,00,00,00,00, 00,00,00,00,00, 00,00,00,00},
	{00,00,00,00,00, 00,00,00,00,00, 00,00,00,00,00, 00,00,00,00,00, 00,00,00,00},
	{00,12,12,12,12, 00,12,00,12,12, 12,12,00,00,00, 00,00,00,00,00, 00,00,00,00},
	{00,12,00,00,12, 00,12,00,12,00, 00,12,00,00,00, 00,00,00,00,00, 00,00,00,00},
	{00,12,00,00,12, 00,12,00,12,00, 00,12,00,00,00, 00,00,00,00,00, 00,00,00,00},

	{00,12,12,12,12, 00,12,00,12,00, 00,12,00,00,00, 00,00,00,00,00, 00,00,00,00},
	{00,12,00,00,12, 00,12,00,12,00, 00,12,00,00,00, 00,00,00,00,00, 00,00,00,00},
	{00,12,00,00,12, 00,12,00,12,00, 00,12,00,00,00, 00,00,00,00,00, 00,00,00,00},
	{00,12,12,12,12, 00,12,00,12,12, 12,12,00,00,00, 00,00,00,00,00, 00,00,00,00},
	{00,00,00,00,00, 00,00,00,00,00, 00,00,00,00,00, 00,00,00,00,00, 00,00,00,00},

	{00,00,00,00,00, 00,00,00,00,00, 00,00,00,00,00, 00,00,00,00,00, 00,00,00,00},
	{00,00,00,00,00, 00,00,00,00,00, 00,00,00,00,00, 00,00,00,00,00, 00,00,00,00},
	{00,00,00,00,00, 00,00,00,00,00, 00,00,00,00,00, 00,00,00,00,00, 00,00,00,00},
	{00,00,00,00,00, 00,00,00,00,00, 00,00,00,00,00, 00,00,00,00,00, 00,00,00,00}
};

bool Stage::Init(void)//インスタンスの初期化
{
	mOffset = { 0, 0 };
	
	SetMap(MAP_ID::NORMAL);
	return true;
}

Vector2 Stage::UpDate(void)//インスタンスの更新
{
	return mOffset;
}

void Stage::Draw(void)//インスタンスの描画
{
	for (int y = 0; y < mMapSize.y; y++)
	{
		for (int x = 0; x < mMapSize.x; x++)
		{
			//チップの表示
			DrawGraph(x * CHIP_SIZE_X - mOffset.x, y * CHIP_SIZE_Y - mOffset.y, mChipImage[mMap[y][x]], 0);

			//チップ内のメモリ番号の表示
			//DrawFormatString(x * CHIP_SIZE_X + 10 - Pos.x, y * CHIP_SIZE_Y + 10 - Pos.y, GetColor(255, 255, 255), "%d", mMap[y][x]);
		}
	}
}

bool Stage::Release(void)//インスタンスの開放
{
	for (int m = 0; m < CHIP_IMAGE_MAX; m++)
	{
		DeleteGraph(mChipImage[m]);
	}
	return true;
}

void Stage::SetMap(MAP_ID mapID)	//指定されたマップ情報をマップ配列に格納する
{
	mMapID = mapID;
	for (int x = 0; x < mMapSize.x; x++)
	{
		for (int y = 0; y < mMapSize.y; y++)
		{
			mMap[y][x] = 0;
		}
	}
	switch (mMapID)
	{
	case MAP_ID::NORMAL:
		mMapSize.y = MAP_NORMAL_Y;
		mMapSize.x = MAP_NORMAL_X;
		//マップの初期化
		for (int x = 0; x < mMapSize.x; x++)
		{
			for (int y = 0; y < mMapSize.y; y++)
			{
				mMap[y][x] = mapNormal[y][x];
			}
		}
		break;
	case MAP_ID::FIRE:
		mMapSize.y = MAP_FIRE_Y;
		mMapSize.x = MAP_FIRE_X;
		//マップの初期化
		for (int x = 0; x < mMapSize.x; x++)
		{
			for (int y = 0; y < mMapSize.y; y++)
			{
				mMap[y][x] = mapFire[y][x];
			}
		}
		break;
	default:
		break;
	}
}

int Stage::GetMapChip(Vector2 pos)
{
	//①マップ座標posをマップチップ配列のindexに変換
	//②マップチップ配列の中にあるマップチップ番号を返す。
	return mMap[pos.y / CHIP_SIZE_Y][pos.x / CHIP_SIZE_X];
}

Stage::Stage(void) //コンストラスタ
{
	LoadDivGraph("Image/Bg.png",
		CHIP_IMAGE_MAX,
		CHIP_IMAGE_MAX,
		1,
		CHIP_SIZE_X,
		CHIP_SIZE_Y,
		&mChipImage[0]);
}

Stage::~Stage(void) //デスコンストラスタ
{

}